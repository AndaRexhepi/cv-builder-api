package org.example.cvbuilderapp.config;

import org.example.cvbuilderapp.entities.User;
import org.example.cvbuilderapp.repositories.UserRepository;
import org.example.cvbuilderapp.security.AppUserDetailsService;
import org.example.cvbuilderapp.security.JwtAuthenticationFilter;
import org.example.cvbuilderapp.services.interfaces.AuthenticationService;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.ProviderManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.factory.PasswordEncoderFactories;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import static org.example.cvbuilderapp.entities.security.Permission.*;
import static org.example.cvbuilderapp.entities.security.Role.ADMIN;
import static org.example.cvbuilderapp.entities.security.Role.USER;

@Configuration
@EnableWebSecurity
public class SecurityConfigurations {

    @Bean
    public AuthenticationManager authenticationManagerBean( UserDetailsService userDetailsService,
                                                            PasswordEncoder passwordEncoder) throws Exception {
        DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();
        authenticationProvider.setUserDetailsService(userDetailsService);
        authenticationProvider.setPasswordEncoder(passwordEncoder);

        return new ProviderManager(authenticationProvider);
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return PasswordEncoderFactories.createDelegatingPasswordEncoder();
    }

    @Bean
    public JwtAuthenticationFilter jwtAuthenticationFilter(AuthenticationService authentication) {
        return new JwtAuthenticationFilter(authentication);
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity httpSecurity, JwtAuthenticationFilter jwtAuthenticationFilter) throws Exception{
        httpSecurity.authorizeHttpRequests(auth -> auth
                .requestMatchers(HttpMethod.POST, "/api/v1/auth/**", "/api/v1/users").permitAll()

                .requestMatchers("api/v1/resumes/**").hasAnyRole(ADMIN.name(), USER.name())

                .requestMatchers(HttpMethod.GET, "api/v1/resumes/**")
                .hasAnyAuthority(ADMIN_READ.name())
                .requestMatchers(HttpMethod.POST, "api/v1/resumes/**")
                .hasAnyAuthority(ADMIN_WRITE.name())
                .requestMatchers(HttpMethod.PUT, "api/v1/resumes/**")
                .hasAnyAuthority(ADMIN_WRITE.name())
                .requestMatchers(HttpMethod.DELETE, "api/v1/resumes/**")
                .hasAnyAuthority(ADMIN_WRITE.name())


                .anyRequest().authenticated())

                .csrf(csrf -> csrf.disable())
                .cors(cors -> {}) // Enable CORS with the bean from CorsConfig
                .sessionManagement(session ->
                        session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                )

                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);

        return httpSecurity.build();
    }

    @Bean
    public UserDetailsService userDetailsService(UserRepository userRepository) {
        AppUserDetailsService appUserDetailsService = new AppUserDetailsService(userRepository);

        String email = "user@test.com";
        userRepository.findByEmail(email)
                .orElseGet(() -> {
                    var user = User.builder()
                            .name("User")
                            .surname("Test")
                            .email(email)
                            .role(USER)
                            .password(passwordEncoder().encode("password"))
                            .build();

                    return userRepository.save(user);
                });

        return appUserDetailsService;
    }


}
