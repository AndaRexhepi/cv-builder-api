package org.example.cvbuilderapp.controllers;

import org.example.cvbuilderapp.dtos.ErrorResponse;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.HttpMediaTypeNotAcceptableException;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import java.util.HashMap;
import java.util.Map;

@RestControllerAdvice
public class ErrorController {

//    @ExceptionHandler(MethodArgumentNotValidException.class)
//    public ResponseEntity<ErrorResponse> handleValidationException(MethodArgumentNotValidException e) {
//        Map<String, String> errors = new HashMap<>();
//        e.getBindingResult()
//                .getFieldErrors()
//                .forEach(error -> errors.put(error.getField(), error.getDefaultMessage()));
//
//        var errorResponse = new ErrorResponse(e.getMessage(), HttpStatus.BAD_REQUEST.value(), errors);
//        return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST); // 400
//    }

    // Exception for general errors
//    @ExceptionHandler(Exception.class)
//    public ResponseEntity<ErrorResponse> handleException(Exception e) {
//        return new ResponseEntity<>(
//                new ErrorResponse(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR.value(), null), // 500
//                HttpStatus.INTERNAL_SERVER_ERROR
//        );
//    }

    @ResponseBody
    @ExceptionHandler(HttpMediaTypeNotAcceptableException.class)
    public void handleHttpMediaTypeNotAcceptableException() {
        System.out.println("acceptable MIME type:" + MediaType.APPLICATION_JSON_VALUE);
    }

//    // Exception for resource not found errors
//    @ExceptionHandler(RuntimeException.class)
//    public ResponseEntity<ErrorResponse> handleResourceNotFoundException(RuntimeException e) {
//        return new ResponseEntity<>(
//                new ErrorResponse(e.getMessage(), HttpStatus.NOT_FOUND.value(), null), // 404
//                HttpStatus.NOT_FOUND
//        );
//    }

//    @ExceptionHandler(IllegalArgumentException.class)
//    public ResponseEntity<ErrorResponse> handleIllegalArgumentException(IllegalArgumentException e) {
//        return new ResponseEntity<>(
//                new ErrorResponse(e.getMessage(), HttpStatus.CONFLICT.value(), null), // 409
//                HttpStatus.CONFLICT
//        );
//    }
}
